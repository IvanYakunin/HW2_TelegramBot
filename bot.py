import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import matplotlib.pyplot as plt
import io
import os
from datetime import datetime


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
users = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
WATER_BASE_MULTIPLIER = 30  # –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞
ACTIVITY_WATER_BONUS = 500  # –º–ª –∑–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
HOT_WEATHER_WATER_BONUS = 500  # –º–ª –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ > 25¬∞C
CALORIE_ACTIVITY_BONUS = 200  # –∫–∫–∞–ª –∑–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

WORKOUTS = {
    "–±–µ–≥": {
        "emoji": "üèÉ‚Äç‚ôÇÔ∏è",
        "cal_per_min": 10,
        "water_bonus_per_30min": 200
    },
    "—Ö–æ–¥—å–±–∞": {
        "emoji": "üö∂‚Äç‚ôÇÔ∏è",
        "cal_per_min": 4,
        "water_bonus_per_30min": 100
    },
    "–≤–µ–ª–æ—Å–∏–ø–µ–¥": {
        "emoji": "üö¥‚Äç‚ôÇÔ∏è",
        "cal_per_min": 8,
        "water_bonus_per_30min": 200
    },
    "–ø–ª–∞–≤–∞–Ω–∏–µ": {
        "emoji": "üèä‚Äç‚ôÇÔ∏è",
        "cal_per_min": 9,
        "water_bonus_per_30min": 200
    },
    "–π–æ–≥–∞": {
        "emoji": "üßò‚Äç‚ôÇÔ∏è",
        "cal_per_min": 3,
        "water_bonus_per_30min": 100
    },
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã
def calculate_water_goal(weight, activity_minutes, temperature):
    water_goal = weight * WATER_BASE_MULTIPLIER
    water_goal += (activity_minutes // 30) * ACTIVITY_WATER_BONUS
    if temperature > 25:
        water_goal += HOT_WEATHER_WATER_BONUS
    return water_goal

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π
def calculate_calorie_goal(weight, height, age, activity_minutes):
    calorie_goal = 10 * weight + 6.25 * height - 5 * age
    calorie_goal += (activity_minutes // 30) * CALORIE_ACTIVITY_BONUS
    return calorie_goal

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π. "
                                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

# –ö–æ–º–∞–Ω–¥–∞ /set_profile
async def set_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    users[user_id] = {"step": "weight"}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
async def handle_profile_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return

    step = users[user_id].get("step")
    if step == "weight":
        try:
            weight = float(text)
            users[user_id]["weight"] = weight
            users[user_id]["step"] = "height"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.")
    elif step == "height":
        try:
            height = float(text)
            users[user_id]["height"] = height
            users[user_id]["step"] = "age"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞.")
    elif step == "age":
        try:
            age = int(text)
            users[user_id]["age"] = age
            users[user_id]["step"] = "activity"
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")
    elif step == "activity":
        try:
            activity = int(text)
            users[user_id]["activity"] = activity
            users[user_id]["step"] = "city"
            await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? (en)")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
    elif step == "city":
        city = text
        users[user_id]["city"] = city
        users[user_id]["step"] = None

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –≥–æ—Ä–æ–¥–∞
        temperature = get_weather(city)
        if temperature is None:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º—ã
        weight = users[user_id]["weight"]
        height = users[user_id]["height"]
        age = users[user_id]["age"]
        activity = users[user_id]["activity"]

        water_goal = calculate_water_goal(weight, activity, temperature)
        calorie_goal = calculate_calorie_goal(weight, height, age, activity)

        users[user_id]["water_goal"] = water_goal
        users[user_id]["calorie_goal"] = calorie_goal
        users[user_id]["logged_water"] = 0
        users[user_id]["logged_calories"] = 0
        users[user_id]["burned_calories"] = 0
        users[user_id]["water_logs"] = []
        users[user_id]["food_logs"] = []

        await update.message.reply_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                        f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª\n"
                                        f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ OpenWeatherMap API
def get_weather(city):
    API_KEY = "openweathermap_key"
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data["main"]["temp"]
    return None

def log_water_entry(user_id, amount):
    """–õ–æ–≥–∏—Ä—É–µ–º –≤–æ–¥—É (—Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º)."""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    users[user_id]["logged_water"] += amount
    
    # –ü–∏—à–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    users[user_id]["water_logs"].append({
        "datetime": datetime.now(),
        "amount": amount
    })

def log_food_entry(user_id, calories):
    """–õ–æ–≥–∏—Ä—É–µ–º –µ–¥—É (—Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º)."""
    users[user_id]["logged_calories"] += calories
    users[user_id]["food_logs"].append({
        "datetime": datetime.now(),
        "calories": calories
    })

# –ö–æ–º–∞–Ω–¥–∞ /log_water
async def log_water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in users or "water_goal" not in users[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        return

    try:
        amount = int(context.args[0])
        log_water_entry(user_id, amount)
        remaining = users[user_id]["water_goal"] - users[user_id]["logged_water"]
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–ª –≤–æ–¥—ã.\n"
                                        f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining} –º–ª.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")

# –ö–æ–º–∞–Ω–¥–∞ /check_progress
async def check_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in users or "water_goal" not in users[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        return

    water_goal = users[user_id]["water_goal"]
    logged_water = users[user_id]["logged_water"]
    calorie_goal = users[user_id]["calorie_goal"]
    logged_calories = users[user_id]["logged_calories"]
    burned_calories = users[user_id]["burned_calories"]

    remaining_water = water_goal - logged_water
    remaining_calories = logged_calories - burned_calories

    await update.message.reply_text(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
                                    f"–í–æ–¥–∞:\n"
                                    f"- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n"
                                    f"- –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.\n"
                                    f"–ö–∞–ª–æ—Ä–∏–∏:\n"
                                    f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
                                    f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª.\n"
                                    f"- –ë–∞–ª–∞–Ω—Å: {remaining_calories} –∫–∫–∞–ª.")
    
# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–≤–µ—Å, —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≥–æ—Ä–æ–¥).\n"
        "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã (–≤ –º–ª).\n"
        "/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∏—â–∏.\n"
        "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)> - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n"
        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º.\n"
        "/show_graph - –í—ã–≤–µ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π.\n"
        "/recommend - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥."
    )
    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /log_food
async def log_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in users or "calorie_goal" not in users[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        return

    try:
        product_name = " ".join(context.args)
        if not product_name:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>")
            return

        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ OpenFoodFacts API
        product_data = search_product(product_name)
        if not product_data:
            await update.message.reply_text(f"–ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞
        calories_per_100g = product_data.get("calories", None)
        if calories_per_100g is None:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–æ—Ä–∏—è—Ö –¥–ª—è '{product_name}'.")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ
        await update.message.reply_text(
            f"{product_data['emoji']} {product_data['name']} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. "
            "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
        users[user_id]["pending_food"] = {
            "calories_per_100g": calories_per_100g,
            "name": product_data["name"],
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /log_food: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ OpenFoodFacts API
def search_product(query):
    url = f"https://world.openfoodfacts.org/cgi/search.pl"
    params = {
        "search_terms": query,
        "search_simple": 1,
        "action": "process",
        "json": 1,
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        products = data.get("products", [])
        if products:
            product = products[0]
            name = product.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
            emoji = "üç¥" 
            calories = None
            nutriments = product.get("nutriments", {})
            if "energy-kcal_100g" in nutriments:
                calories = float(nutriments["energy-kcal_100g"])
            return {"name": name, "calories": calories, "emoji": emoji}
    return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥—ã
async def handle_food_logging(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if user_id not in users or "pending_food" not in users[user_id]:
        return

    try:
        grams = float(text)
        pending_food = users[user_id]["pending_food"]
        calories_per_100g = pending_food["calories_per_100g"]
        name = pending_food["name"]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        consumed_calories = (calories_per_100g / 100) * grams
        log_food_entry(user_id, consumed_calories)

        del users[user_id]["pending_food"]

        await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {consumed_calories:.1f} –∫–∫–∞–ª ({grams} –≥ {name}).")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º.")

async def log_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—å
    if user_id not in users or "calorie_goal" not in users[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–ª–∏ —É–∫–∞–∑–∞–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
    if len(context.args) < 2:
        available_workouts = "\n".join([f"- {w}" for w in WORKOUTS.keys()])
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n"
            f"{available_workouts}"
        )
        return

    workout_type = context.args[0].lower()
    try:
        duration = int(context.args[1])
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö.\n"
            "–ü—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if workout_type not in WORKOUTS:
        available_workouts = "\n".join([f"- {w}" for w in WORKOUTS.keys()])
        await update.message.reply_text(
            f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ '{workout_type}'.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n"
            f"{available_workouts}"
        )
        return

    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π —Å–æ–∂–∂–µ–Ω–æ
    cal_per_min = WORKOUTS[workout_type]["cal_per_min"]
    total_burned = cal_per_min * duration
    users[user_id]["burned_calories"] += total_burned

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–æ–¥–∞
    water_bonus_per_30 = WORKOUTS[workout_type]["water_bonus_per_30min"]
    extra_water = (duration // 30) * water_bonus_per_30

    emoji = WORKOUTS[workout_type]["emoji"]
    reply_text = (
        f"{emoji} {workout_type.capitalize()} {duration} –º–∏–Ω ‚Äî {total_burned} –∫–∫–∞–ª.\n"
    )
    if extra_water > 0:
        reply_text += f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {extra_water} –º–ª –≤–æ–¥—ã."
        users[user_id]["water_goal"] += extra_water
    else:
        reply_text += "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!"

    await update.message.reply_text(reply_text)

def generate_time_based_plots(user_id, target_date=None):
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ (–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π).
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä target_date (—Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD') - –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –∑–∞ —ç—Ç—É –¥–∞—Ç—É.
    –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –∏–ª–∏ —Ç–æ–∂–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä).
    """
    water_logs = users[user_id].get("water_logs", [])
    food_logs = users[user_id].get("food_logs", [])

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É, –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
    # –ï—Å–ª–∏ target_date –Ω–µ –∑–∞–¥–∞–Ω, –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤—Å–µ.
    if target_date:
        year, month, day = map(int, target_date.split('-'))
        filter_date = datetime(year, month, day).date()

        water_logs = [w for w in water_logs if w["datetime"].date() == filter_date]
        food_logs = [f for f in food_logs if f["datetime"].date() == filter_date]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    water_logs.sort(key=lambda x: x["datetime"])
    food_logs.sort(key=lambda x: x["datetime"])

    if not water_logs and not food_logs:
        return None  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞

    # –°—á–∏—Ç–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã
    # –î–ª—è –≤–æ–¥—ã
    water_times = []
    water_cumulative = 0
    water_values = []
    
    for entry in water_logs:
        water_cumulative += entry["amount"]
        water_times.append(entry["datetime"])
        water_values.append(water_cumulative)

    # –î–ª—è –µ–¥—ã (–∫–∞–ª–æ—Ä–∏–∏)
    food_times = []
    food_cumulative = 0
    food_values = []
    
    for entry in food_logs:
        food_cumulative += entry["calories"]
        food_times.append(entry["datetime"])
        food_values.append(food_cumulative)

    # –†–∏—Å—É–µ–º
    fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(8, 6))
    if target_date:
        fig.suptitle(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {target_date}")
    else:
        fig.suptitle("–ü—Ä–æ–≥—Ä–µ—Å—Å (–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è)")

    # --- –í–µ—Ä—Ö–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫: –í–æ–¥–∞
    if water_times:
        axes[0].plot(water_times, water_values, marker='o', color='blue', label='–í–æ–¥–∞ (–º–ª)')
    axes[0].set_title("–í–æ–¥–∞ (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ)")
    axes[0].set_xlabel("–í—Ä–µ–º—è")
    axes[0].set_ylabel("–º–ª")
    axes[0].grid(True)
    axes[0].legend()

    # --- –ù–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫: –ö–∞–ª–æ—Ä–∏–∏
    if food_times:
        axes[1].plot(food_times, food_values, marker='o', color='red', label='–ö–∞–ª–æ—Ä–∏–∏ (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ)')
    axes[1].set_title("–ö–∞–ª–æ—Ä–∏–∏ (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ)")
    axes[1].set_xlabel("–í—Ä–µ–º—è")
    axes[1].set_ylabel("–∫–∫–∞–ª")
    axes[1].grid(True)
    axes[1].legend()

    # –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–ø—Ä–∞–≤–∏–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–≤–æ—Ä–æ—Ç –º–µ—Ç–æ–∫ –ø–æ X (—á—Ç–æ–±—ã –Ω–µ –Ω–∞–ª–µ–∑–∞–ª–∏)
    plt.tight_layout()
    for ax in axes:
        for label in ax.get_xticklabels():
            label.set_rotation(45)
            label.set_ha('right')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∏—Å—É–Ω–æ–∫
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    return buf

async def show_graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in users or "water_logs" not in users[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(context.args) > 0:
        target_date = context.args[0]  # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD'
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
        target_date = datetime.now().strftime("%Y-%m-%d")

    buf = generate_time_based_plots(user_id, target_date)
    if buf is None:
        await update.message.reply_text(f"–î–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—ã {target_date} –Ω–µ—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=buf,
        caption=f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {target_date}"
    )


def get_recommendations(user_id):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞:
      - –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã (–µ—Å–ª–∏ –≤—ã–ø–∏—Ç–æ –º–µ–Ω—å—à–µ 80% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã).
      - –ü–µ—Ä–µ–±–æ–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∫–∞–ª–æ—Ä–∏–π –≤ —Ä–∞—Ü–∏–æ–Ω–µ.
      - –ë–∞–ª–∞–Ω—Å–µ –º–µ–∂–¥—É –ø–æ—Ç—Ä–µ–±–ª—ë–Ω–Ω—ã–º–∏ –∏ —Å–æ–∂–∂–µ–Ω–Ω—ã–º–∏ –∫–∞–ª–æ—Ä–∏—è–º–∏.
    """
    user_data = users[user_id]
    water_goal = user_data.get("water_goal", 0)
    logged_water = user_data.get("logged_water", 0)
    calorie_goal = user_data.get("calorie_goal", 0)
    logged_calories = user_data.get("logged_calories", 0)
    burned_calories = user_data.get("burned_calories", 0)

    recommendations = []

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–æ–¥–µ:
    water_deficit = water_goal - logged_water
    if water_deficit > water_goal * 0.2:
        recommendations.append("–í—ã –≤—ã–ø–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–ø–∏—Ç—å –µ—â–µ —Å—Ç–∞–∫–∞–Ω —á–∏—Å—Ç–æ–π –≤–æ–¥—ã.")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–∞—Ü–∏–æ–Ω—É:
    if logged_calories > calorie_goal:
        recommendations.append("–í–∞—à —Ä–∞—Ü–∏–æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª–µ–≥–∫–∏–µ –±–ª—é–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç –∏–ª–∏ —Å—É–ø), —á—Ç–æ–±—ã –Ω–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∑–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π.")
    elif logged_calories < calorie_goal * 0.7:
        recommendations.append("–í—ã –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –º–µ–Ω—å—à–µ –∫–∞–ª–æ—Ä–∏–π, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤.")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
    net_calories = logged_calories - burned_calories  # "—á–∏—Å—Ç—ã–µ" –∫–∞–ª–æ—Ä–∏–∏, –æ—Å—Ç–∞—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if net_calories > calorie_goal:
        recommendations.append("–í–∞—à –∫–∞–ª–æ—Ä–∏–π–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–≤–æ–ª—å–Ω–æ –≤—ã—Å–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å 30 –º–∏–Ω—É—Ç –∫–∞—Ä–¥–∏–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–≥ –∏–ª–∏ –±—ã—Å—Ç—Ä—É—é —Ö–æ–¥—å–±—É) –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π.")
    elif burned_calories < calorie_goal * 0.2:
        recommendations.append("–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–≤–æ–π –¥–µ–Ω—å. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ 20‚Äì30 –º–∏–Ω—É—Ç –π–æ–≥–∏ –∏–ª–∏ –ª–µ–≥–∫–æ–π –∑–∞—Ä—è–¥–∫–∏.")

    if not recommendations:
        recommendations.append("–û—Ç–ª–∏—á–Ω–æ! –í—ã —Ö–æ—Ä–æ—à–æ —Å–æ–±–ª—é–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –Ω–æ—Ä–º—ã.")

    return "\n".join(recommendations)

async def recommend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in users or "water_goal" not in users[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        return

    recs = get_recommendations(user_id)
    await update.message.reply_text(recs)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    TOKEN = "telegram_key"
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_profile", set_profile))
    application.add_handler(CommandHandler("log_water", log_water))
    application.add_handler(CommandHandler("log_food", log_food))
    application.add_handler(CommandHandler("log_workout", log_workout))
    application.add_handler(CommandHandler("show_graph", show_graph))
    application.add_handler(CommandHandler("check_progress", check_progress))
    application.add_handler(CommandHandler("recommend", recommend_command))
    application.add_handler(CommandHandler("help", help_command))


    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_food_logging),
        group=0  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
    )
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profile_setup),
        group=1  # —Å–ª–µ–¥—É—é—â–∞—è –≥—Ä—É–ø–ø–∞
    )

    application.run_polling()

if __name__ == "__main__":
    main()